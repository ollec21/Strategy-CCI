/**
 * @file
 * Defines default strategy parameter values for the given timeframe.
 */

// Defines indicator's parameter values for the given pair symbol and timeframe.
struct Indi_CCI_Params_{{ Timeframe }} : CCIParams {
  Indi_CCI_Params_{{ Timeframe }}() : CCIParams(indi_cci_defaults, PERIOD_{{ Timeframe }}) {
    applied_price = (ENUM_APPLIED_PRICE){{ CCI_Indi_CCI_Applied_Price | default(0) }};
    period = {{ CCI_Indi_CCI_Period | default(0) }};
    shift = {{ CCI_Indi_CCI_Shift | default(0) }};
  }
} indi_cci_{{ Timeframe | lower }};

// Defines strategy's parameter values for the given pair symbol and timeframe.
struct Stg_CCI_Params_{{ Timeframe }} : StgParams {
  // Struct constructor.
  Stg_CCI_Params_{{ Timeframe }}() : StgParams(stg_cci_defaults) {
    lot_size = {{ CCI_LotSize | default(0) }};
    signal_open_method = {{ CCI_SignalOpenMethod | default(0) }};
    signal_open_filter = {{ CCI_SignalOpenFilterMethod | default(1) }};
    signal_open_level = (float){{ CCI_SignalOpenLevel | default(0) }};
    signal_open_boost = {{ CCI_SignalOpenBoostMethod | default(0) }};
    signal_close_method = {{ CCI_SignalCloseMethod | default(0) }};
    signal_close_level = (float){{ CCI_SignalCloseLevel | default(0) }};
    price_stop_method = {{ CCI_PriceStopMethod | default(0) }};
    price_stop_level = (float){{ CCI_SignalCloseLevel | default(1) }};
    tick_filter_method = {{ CCI_TickFilterMethod  | default(1) }};
    max_spread = {{ CCI_MaxSpread | default(0) }};
  }
} stg_cci_{{ Timeframe | lower }};
